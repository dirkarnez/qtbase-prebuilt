name: cpp-cmake-mingw-prebuilt-release-actions-workflow
on:
  workflow_dispatch:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*'
      
jobs:
  build:
    strategy:
      matrix:
        compiler:
        # - {
        #     name: "x86_64-8.1.0-release-posix-seh-rt_v6-rev0",
        #     url: "https://github.com/dirkarnez/cpp-tools/raw/main/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z"
        #   }
        - {
            name: "winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64-9.0.0-r1",
            url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-12.0.1-9.0.0-r1/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64-9.0.0-r1.zip"
          }
        # - {
        #     name: "msvc2019"
        #   }

    runs-on: windows-latest
    env:
      libraryName: qtbase
      cmakeInstallationPath: qtbase-installation
      tagName: v6.6.0
      mingwTargetZip: qtbase-${{ github.ref_name }}-mingw64-x86_64-posix-seh-rev0-8.1.0.zip
    steps:
#       - name: git clone
#         shell: cmd
#         run: |
#           git config --global user.name "dirkarnez" &&^
#           git config --global user.email "smalldirkalex@gmail.com" &&^
#           git clone --recursive https://dirkarnez:${{ secrets.GH_PAT }}@github.com.git && cd qtbase-prebuilt && git checkout ${{ env.tagName }} &&^
#           git fetch origin &&^
#           git cherry-pick b8fe70b4dc84c66586dbd14dbf1878905dc3e24f &&^
#           git cherry-pick b9700a899e49366837fedcf04a58371500fb3357

      - uses: actions/checkout@v4
        with:
          repository: qt/qtbase
          path: qt_qtbase
          submodules: true
          ref: ${{ env.tagName }}

      # - uses: actions/checkout@v3
      #   with:
      #     repository: dirkarnez/qtbase-prebuilt
      #     path: dirkarnez_qtbase-prebuilt
          
      - name: curl PortableGit-2.38.1-64-bit.7z.exe
        shell: cmd
        run:  cd /d ${{ github.workspace }} && curl https://github.com/git-for-windows/git/releases/download/v2.38.1.windows.1/PortableGit-2.38.1-64-bit.7z.exe -L --output PortableGit-2.38.1-64-bit.7z.exe && dir && 7z.exe x PortableGit-2.38.1-64-bit.7z.exe -o"${{ github.workspace }}\PortableGit-2.38.1-64-bit"
       
      - name: curl python-3.10.8-amd64-portable.zip
        shell: cmd
        run:  cd /d ${{ github.workspace }} && curl https://github.com/dirkarnez/python-portable/releases/download/v3.10.8/python-3.10.8-amd64-portable.zip -L --output python-3.10.8-amd64-portable.zip && dir && 7z.exe x python-3.10.8-amd64-portable.zip -o"${{ github.workspace }}\python-3.10.8-amd64-portable"
              
      # - name: curl strawberry-perl-5.32.1.1-64bit-portable.zip
      #   shell: cmd
      #   run:  cd /d ${{ github.workspace }} && curl https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit-portable.zip -L --output strawberry-perl-5.32.1.1-64bit-portable.zip && dir && 7z.exe x strawberry-perl-5.32.1.1-64bit-portable.zip -o"${{ github.workspace }}\strawberry-perl-5.32.1.1-64bit-portable"
        
      - name: download compiler
        if: ${{  matrix.compiler.url }}
        shell: cmd
        run: |
          curl ${{ matrix.compiler.url }} -L --output compiler &&^
          7z.exe x compiler
          
      - name: curl cmake-3.24.0-windows-x86_64.zip
        shell: cmd
        run: cd /d ${{ github.workspace }} && curl https://github.com/Kitware/CMake/releases/download/v3.24.0/cmake-3.24.0-windows-x86_64.zip -L --output cmake-3.24.0-windows-x86_64.zip && dir && 7z.exe x cmake-3.24.0-windows-x86_64.zip

      - shell: cmd
        run: |
          curl https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip -L -O &&^
          7z x ninja-win.zip -o"ninja-win"
          
      - name: make build directory
        run:  mkdir cmake-build
        working-directory: qt_qtbase
        
      - name: configure
        shell: cmd
        working-directory: qt_qtbase/cmake-build
        run:  |
          set PATH=^
          C:\Windows\System32;^
          C:\Windows\System32\WindowsPowerShell\v1.0;^
          ${{ github.workspace }}\ninja-win;^
          ${{ github.workspace }}\mingw64;^
          ${{ github.workspace }}\mingw64\bin;^
          ${{ github.workspace }}\cmake-3.24.0-windows-x86_64\bin;^
          ${{ github.workspace }}\PortableGit-2.38.1-64-bit;^
          ${{ github.workspace }}\PortableGit-2.38.1-64-bit\bin;^
          ${{ github.workspace }}\python-3.10.8-amd64-portable;
          gcc --version &&^
          ..\configure -opensource -confirm-license -no-pch -debug -nomake tests -nomake examples -prefix '${{ runner.temp }}'/install_dir -qt-sqlite -qt-pcre -qt-zlib -qt-freetype -qt-libpng -qt-libjpeg -qt-harfbuzz -no-feature-sql-psql -no-feature-sql-mysql -no-feature-sql-odbc
        
      # - name: set PATH, check mingw version, cmake generate, build and install
      #   shell: cmd
      #   run: |
      #       set PATH=^
      #       C:\Windows\System32\WindowsPowerShell\v1.0;^
      #       ${{ github.workspace }}\mingw64;^
      #       ${{ github.workspace }}\mingw64\bin;^
      #       ${{ github.workspace }}\cmake-3.24.0-windows-x86_64\bin;^
      #       ${{ github.workspace }}\PortableGit-2.38.1-64-bit;^
      #       ${{ github.workspace }}\PortableGit-2.38.1-64-bit\bin;^
      #       ${{ github.workspace }}\strawberry-perl-5.32.1.1-64bit-portable\perl\bin;^
      #       ${{ github.workspace }}\python-3.10.8-amd64-portable;
      #       gcc --version &&^
      #       cd  &&^
      #       cmake.exe -G "MinGW Makefiles" ^
      #       -DCMAKE_BUILD_TYPE=Release ^
      #       -DBUILD_SHARED_LIBS=OFF ^
      #       -DCMAKE_CXX_FLAGS="-DQ_CC_MINGW=1" ^
      #       -DCMAKE_INSTALL_PREFIX="cmake-build/${{ env.cmakeInstallationPath }}" -B./cmake-build &&^
      #       cd cmake-build && cmake --build . && cmake --install . 
      - name: print logfiles and other info in case of failure
        working-directory: qt_qtbase/cmake-build
        if: ${{ failure() }}
        run: |
          echo ==== CMakeError.log ====
          type CMakeFiles/CMakeError.log
          echo ==== CMakeOutput.log ====
          type CMakeFiles/CMakeOutput.log
          echo ==== CMakeCache.txt ====
          type CMakeCache.txt
        
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "qt_qtbase/cmake-build/${{ env.cmakeInstallationPath }}"
          filename: "${{ env.mingwTargetZip }}"
          
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "qt_qtbase/cmake-build/${{ env.cmakeInstallationPath }}/${{ env.mingwTargetZip }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
